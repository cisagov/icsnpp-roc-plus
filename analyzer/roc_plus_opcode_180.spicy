module ROC_PLUS_OPCODE_180;

import spicy;
import ROC_PLUS_ENUMS;
import ROC_PLUS_FUNCTIONS;
import ROC_PLUS_GLOBALS;

type Parameter = unit {
    pointType        : uint8;
    pointLogicNumber : uint8;
    parameterNumber  : uint8;
};

type ParameterWithData = unit(dataLength : uint8) {
    parameter : Parameter;
    data      : bytes &size=(dataLength) &convert=ROC_PLUS_FUNCTIONS::bytesToHexString($$);
};

type RequestParameters = unit(dataLength : uint8) {
    switch(ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL) {
        ROC_PLUS_ENUMS::PacketType::REQUEST  -> request  : RequestParametersRequest(dataLength);
        ROC_PLUS_ENUMS::PacketType::RESPONSE -> response : RequestParametersResponse(dataLength);
        ROC_PLUS_ENUMS::PacketType::UNKNOWN  -> unknown  : RequestParametersUnknown(dataLength);
    };
};

type RequestParametersUnknown = unit(dataLength : uint8) {
    data : bytes &size=(dataLength) &convert=ROC_PLUS_FUNCTIONS::bytesToHexString($$);
};

type RequestParametersRequest = unit(dataLength : uint8) {
    numParameters       : uint8;
    requestedParameters : Parameter[self.numParameters];
};

type RequestParametersResponse = unit(dataLength : uint8) {
    numParameters     : uint8;
    # TODO: sending this the datalength does not work as there is a double repeating data portion
    # We would have to build structures for every Point/Logic Number defined in the spec which numbers 300 pages
    # This is not feasible so we are considering all opcode 180 packets to be unknown and dumping the data
    responseParameter : ParameterWithData(dataLength)[self.numParameters];
};