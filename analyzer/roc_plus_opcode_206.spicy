module ROC_PLUS_OPCODE_206;

import spicy;
import ROC_PLUS_ENUMS;
import ROC_PLUS_FUNCTIONS;

type ReadTransactionHistory = unit(dataLength: uint8) {
    var packetType : ROC_PLUS_ENUMS::PacketType;

    command : uint8 &convert=ROC_PLUS_ENUMS::TransactionHistoryCommand($$);
    on command {
        self.packetType = ROC_PLUS_FUNCTIONS::determineOpcode206PacketType(dataLength, self.command);
    }

    switch(self.packetType) {
        ROC_PLUS_ENUMS::PacketType::REQUEST  -> request  : ReadTransactionHistoryRequest(self.command);
        ROC_PLUS_ENUMS::PacketType::RESPONSE -> response : ReadTransactionHistoryResponse(self.command);
        ROC_PLUS_ENUMS::PacketType::UNKNOWN  -> unknown  : ReadTransactionHistoryUnknown;
    };
};

type ReadTransactionHistoryUnknown = unit {
    # For ambiguous packets
};

type ReadTransactionHistoryRequest = unit(command: ROC_PLUS_ENUMS::TransactionHistoryCommand) {
    switch(command) {
        ROC_PLUS_ENUMS::TransactionHistoryCommand::LIST_TRANSACTION -> listt : ListTransactionRequest; # list is a reserved word so using listt
        ROC_PLUS_ENUMS::TransactionHistoryCommand::READ_TRANSACTION -> read  : ReadTransactionRequest;
    };
};

type ReadTransactionHistoryResponse = unit(command: ROC_PLUS_ENUMS::TransactionHistoryCommand) {
    switch(command) {
        ROC_PLUS_ENUMS::TransactionHistoryCommand::LIST_TRANSACTION -> listt : ListTransactionResponse;
        ROC_PLUS_ENUMS::TransactionHistoryCommand::READ_TRANSACTION -> read  : ReadTransactionResponse;
    };
};

type ListTransactionRequest = unit {
    segment           : uint8;
    transactionOffset : uint16;
};

type ReadTransactionRequest = unit {
    segment           : uint8;
    transactionNumber : uint16;
    dataOffset        : uint16;
};

type ReadTransactionResponse = unit {
    command          : uint8;
    messageDataSize  : uint8;
    moreData         : uint8;

    readTransactions : ReadTransaction[self.messageDataSize];
};

type ListTransactionResponse = unit {
    numTransactions : uint8;
    moreData        : uint8;
    description     : bytes &size=10 &convert=ROC_PLUS_FUNCTIONS::bytesToHexString($$);

    listTransactions : ListTransaction[self.numTransactions];
};

type ReadTransaction = unit {
    dataType         : uint8 &convert=ROC_PLUS_ENUMS::DataType($$);
    data             : bytes &size=ROC_PLUS_FUNCTIONS::dataTypeSize(self.dataType) &convert=ROC_PLUS_FUNCTIONS::bytesToHexString($$);
};

type ListTransaction = unit {
    payloadSize       : uint16;
    transactionNumber : uint16;
    dateCreated       : uint32;
};