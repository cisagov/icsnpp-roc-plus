module ROC_PLUS_OPCODE_255;

import spicy;
import ROC_PLUS_ENUMS;
import ROC_PLUS_FUNCTIONS;
import ROC_PLUS_GLOBALS;
#
# Opcode 255 - Error Indicator
#
type Error = unit() {
    errorCode   : uint8 &convert=ROC_PLUS_ENUMS::ErrorCode($$);
    errorOffset : uint8;
};

type ErrorIndicator = unit(dataLength : uint8) {
    switch(ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL) {
        ROC_PLUS_ENUMS::PacketType::REQUEST  -> request  : ErrorIndicatorRequest(dataLength);
        ROC_PLUS_ENUMS::PacketType::RESPONSE -> response : ErrorIndicatorResponse(dataLength);
        ROC_PLUS_ENUMS::PacketType::UNKNOWN  -> unknown  : ErrorIndicatorUnknown();
    };
};

type ErrorIndicatorUnknown = unit {
    # This opcode should always be a response
};

type ErrorIndicatorRequest = unit(dataLength: uint8) {
    # The spec says this is reserved for ROC use but if there ends up being data in this response we have to parse it because of how spicy works
    data : bytes &size=(dataLength);
};

type ErrorIndicatorResponse = unit(dataLength: uint8) {
    errors : Error[(dataLength / 2)];

    # on %done {
    #     print self;
    # }
};