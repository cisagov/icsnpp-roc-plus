module ROC_PLUS_OPCODE_255;

import spicy;
import ROC_PLUS_ENUMS;
import ROC_PLUS_FUNCTIONS;
import ROC_PLUS_GLOBALS;
#
# Opcode 255 - Error Indicator
#
type Error = unit() {
    errorCode   : uint8 &convert=ROC_PLUS_ENUMS::ErrorCode($$);
    errorOffset : uint8;
};

type ErrorIndicator = unit(dataLength : uint8) {
    response : ErrorIndicatorResponse(dataLength) if ( dataLength % 2 == 0 && ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL == ROC_PLUS_ENUMS::PacketType::RESPONSE );
    unknown  : ErrorIndicatorUnknown(dataLength)  if ( dataLength % 2 != 0 || ROC_PLUS_GLOBALS::PACKET_TYPE_GLOBAL != ROC_PLUS_ENUMS::PacketType::RESPONSE );
};

type ErrorIndicatorUnknown = unit(dataLength: uint8) {
    # The spec says the request is reserved for ROC use but if there ends up being data in this request we have to parse it because of how spicy works
    data : bytes &size=(dataLength) &convert=ROC_PLUS_FUNCTIONS::bytesToHexString($$);
};

type ErrorIndicatorResponse = unit(dataLength: uint8) {
    errors : Error[(dataLength / 2)];
};